/**
 * \brief Header file associated with the keyboard's MIDI behaviour
 * \author Brice Croix
 * \date january 28 of 2020
 */

#ifndef MIDI_BEHAVIOUR_H
#define MIDI_BEHAVIOUR_H

#include "keyboard.h"

/**
 * \brief Macro function to send a byte, waits for buffer to be empty
 */
#define USART_SEND(byte) while(!(UCSR0A & 0x20)); UDR0 = byte

// Midi code of C0
#define MIDI_C0 0x0c
// Used Midi channel
#define MIDI_CHANNEL 0x00
// Midi messages codes for channel 0
#define MIDI_MSG_NOTE_OFF 0x80
#define MIDI_MSG_NOTE_ON 0x90
#define MIDI_MSG_AFTERTOUCH_SINGLE 0xA0
#define MIDI_MSG_CONTROLLER_CHANGE 0xB0
#define MIDI_MSG_PROGRAM_CHANGE 0xC0
#define MIDI_MSG_AFTERTOUCH_ALL 0xD0
#define MIDI_MSG_PITCH_BEND 0xE0

/*
 * \brief MIDI code for each note, this array is not usefull anymore. Keeping it in code for information purpose.
 *
const uint8_t MIDI_NOTES[] = {
  0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, //C0 to B0
  0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, //C1 to B1
  0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, //C2 to B2
  0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, //C3 to B3
  0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, //C4 to B4
  0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, //C5 to B5
  0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, //C6 to B6
  0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, //C7 to B7
  0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77  //C8 to B8
};
*/

/**
 * \brief initialize the USART communication protocol
 */
void init_USART();

/**
 * \brief sends MIDI note ON and note OFF events according to the current and previous state of all keys
 */
void process_keys_MIDI();

/**
 * \brief sets the arduino in order to output midi data, contains infinite loop
 */
void midi_behaviour();

#endif
